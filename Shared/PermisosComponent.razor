@typeparam TRol
@using MudBlazor
@using Form.Models
@inject IDialogService DialogService

<MudPaper Class="p-4">
    <MudTabs>
        <MudTabPanel Text="Permisos">
            <MudText Typo="Typo.h6">Gestión de Permisos</MudText>
            @if (enModoCreacion)
            {
                <!-- Formulario para crear un nuevo permiso -->
                <MudTextField @bind-Value="nuevoPermiso.Nombre" Label="Nombre" Required="true" />
                <MudTextField @bind-Value="nuevoPermiso.Descripcion" Label="Descripción" Required="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmarCreacionPermiso">Confirmar</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CancelarCreacionPermiso">Cancelar</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CrearPermiso">Crear Nuevo Permiso</MudButton>

                <MudTable Items="@Permisos" Striped="true">
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Descripción</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        @if (permisoEditando != null && permisoEditando.Id == context.Id)
                        {
                            <!-- Modo Edición -->
                            <MudTd>
                                <MudTextField @bind-Value="permisoEditando.Nombre" Label="Nombre" />
                            </MudTd>
                            <MudTd>
                                <MudTextField @bind-Value="permisoEditando.Descripcion" Label="Descripción" />
                            </MudTd>
                            <MudTd>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AceptarEdicion">Aceptar</MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CancelarEdicion">Cancelar</MudButton>
                            </MudTd>
                        }
                        else
                        {
                            <!-- Modo Normal -->
                            <MudTd>@context.Nombre</MudTd>
                            <MudTd>@context.Descripcion</MudTd>
                            <MudTd>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => EditarPermiso(context)">Editar</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => EliminarPermiso(context.Id)">Eliminar</MudButton>
                            </MudTd>
                        }
                    </RowTemplate>
                </MudTable>
            }
        </MudTabPanel>
        <MudTabPanel Text="Roles">
            <MudText Typo="Typo.h6">Asignar Permisos a Roles</MudText>
            <MudTable Items="@Roles" Striped="true">
                <HeaderContent>
                    <MudTh>Rol</MudTh>
                    <MudTh>Permisos</MudTh>
                    <MudTh>Acciones</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Nombre</MudTd>
                    <MudTd>
                        @foreach (var permiso in context.RolPermisos)
                        {
                            <MudChip T="string">@permiso.Permiso.Nombre</MudChip>
                        }
                    </MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => MostrarDialogoAsignarPermisos(context)">Asignar Permisos</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudTabPanel>
    </MudTabs>
</MudPaper>

@code {
    [Parameter]
    public List<Permiso> Permisos { get; set; } = new List<Permiso>();

    [Parameter]
    public List<Rol> Roles { get; set; } = new List<Rol>();

    [Parameter]
    public EventCallback<Permiso> OnAddPermiso { get; set; }

    [Parameter]
    public EventCallback<Permiso> OnEditPermiso { get; set; }

    [Parameter]
    public EventCallback<int> OnDeletePermiso { get; set; }

    [Parameter]
    public EventCallback<(Rol, List<int>)> OnAsignarPermisos { get; set; }

    private bool enModoCreacion = false;
    private Permiso nuevoPermiso = new Permiso();
    private Permiso permisoEditando;

    private void CrearPermiso()
    {
        enModoCreacion = true;
    }

    private async Task ConfirmarCreacionPermiso()
    {
        if (OnAddPermiso.HasDelegate)
        {
            await OnAddPermiso.InvokeAsync(nuevoPermiso);
        }
        Permisos.Add(nuevoPermiso);
        nuevoPermiso = new Permiso();
        enModoCreacion = false;
        StateHasChanged(); // Actualiza la UI
    }

    private void CancelarCreacionPermiso()
    {
        nuevoPermiso = new Permiso();
        enModoCreacion = false;
        StateHasChanged(); // Actualiza la UI
    }

    private void EditarPermiso(Permiso permiso)
    {
        permisoEditando = new Permiso
            {
                Id = permiso.Id,
                Nombre = permiso.Nombre,
                Descripcion = permiso.Descripcion
            };
        StateHasChanged(); // Forzar la actualización de la UI
    }

    private async Task AceptarEdicion()
    {
        if (OnEditPermiso.HasDelegate)
        {
            await OnEditPermiso.InvokeAsync(permisoEditando);
        }

        var permisoExistente = Permisos.FirstOrDefault(p => p.Id == permisoEditando.Id);
        if (permisoExistente != null)
        {
            permisoExistente.Nombre = permisoEditando.Nombre;
            permisoExistente.Descripcion = permisoEditando.Descripcion;
        }

        permisoEditando = null;
        StateHasChanged(); // Actualiza la UI
    }

    private void CancelarEdicion()
    {
        permisoEditando = null;
        StateHasChanged(); // Actualiza la UI
    }

    private async Task EliminarPermiso(int id)
    {
        if (OnDeletePermiso.HasDelegate)
        {
            await OnDeletePermiso.InvokeAsync(id);
        }
    }

    private async Task MostrarDialogoAsignarPermisos(Rol rol)
    {
        var dialogResult = await DialogService.Show<PermisosDialog<Rol>>("Asignar Permisos", new DialogParameters
        {
            { "Rol", rol },
            { "PermisosDisponibles", Permisos }
        }).Result;

        if (!dialogResult.Canceled)
        {
            var selectedPermissions = (List<int>)dialogResult.Data;
            await AsignarPermisos(rol, selectedPermissions);
        }
    }

    private async Task AsignarPermisos(Rol rol, List<int> permisosIds)
    {
        if (OnAsignarPermisos.HasDelegate)
        {
            await OnAsignarPermisos.InvokeAsync((rol, permisosIds));
        }
    }
}
